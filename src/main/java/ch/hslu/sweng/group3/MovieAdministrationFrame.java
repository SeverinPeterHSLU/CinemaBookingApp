package ch.hslu.sweng.group3;


import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

public class MovieAdministrationFrame extends JFrame {
    private JTable activeMoviesTable;
    private JLabel lblActiveMoviesTabel;
    private JButton btnAddMovie;
    private JButton btnBackToMain;
    private JPanel movieAdministrationPanel;
    private JPanel movieTablePanel;


    public MovieAdministrationFrame() {
        setLayout(null);
        setTitle("Movie Administration");
        setSize(1500, 800);
        setContentPane(movieAdministrationPanel);
        movieTablePanel.setLayout(new BorderLayout());
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setVisible(true);

        DefaultTableModel model = new DefaultTableModel();
        activeMoviesTable = new JTable(model);
        movieTablePanel.add(activeMoviesTable, BorderLayout.CENTER);
        movieTablePanel.add(new JScrollPane(activeMoviesTable));
        activeMoviesTable.setModel(model);


        Object[] headers = {"Movie ID", "Movie Title", "Duration (min)", "Edit", "Delete"};
        model.setColumnIdentifiers(headers);


        ArrayList<Movie> allActiveMovies = App.movieDAO.getMovies();


        for (int r = 0; r < allActiveMovies.size(); r++) {
            String movieID = Integer.toString(allActiveMovies.get(r).getMovieID());
            String movieTitle = allActiveMovies.get(r).getMovieTitle();
            String duration = Integer.toString(allActiveMovies.get(r).getMovieDuration());

            Object[] row = {movieID, movieTitle, duration, "Edit", "Delete"};
            model.addRow(row);
        }
        Action edit = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                Object obj = activeMoviesTable.getValueAt(activeMoviesTable.getSelectedRow(), 0);
                String movieID_string = obj.toString();
                int movieID = Integer.parseInt(movieID_string);
                dispose();
                EditMovieFormFrame editMovieFormFrame = new EditMovieFormFrame(movieID);
            }
        };
        Action delete = new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                Object obj = activeMoviesTable.getValueAt(activeMoviesTable.getSelectedRow(), 0);
                String movieID_string = obj.toString();
                int movieID = Integer.parseInt(movieID_string);
                Movie m = App.movieDAO.getMovie(movieID);
                if (App.movieDAO.removeMovie(m) == false) {
                    InfoBox.infoBox("There are shows booked already for this movie. Therefore it cannot be removed.", "Movie cannot be removed");
                }
                dispose();
                MovieAdministrationFrame newMovieAdministrationFrame = new MovieAdministrationFrame();
            }
        };

        ButtonColumn editButtons = new ButtonColumn(activeMoviesTable, edit, 3);
        ButtonColumn deleteButtons = new ButtonColumn(activeMoviesTable, delete, 4);


        //opens form to create new movie
        btnAddMovie.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
                AddMovieFormFrame addMovieForm = new AddMovieFormFrame();
            }
        });

        //navigates back to mainPanel
        btnBackToMain.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
                MainFrame mainframe = new MainFrame();
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        movieAdministrationPanel = new JPanel();
        movieAdministrationPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(movieAdministrationPanel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        lblActiveMoviesTabel = new JLabel();
        lblActiveMoviesTabel.setText("Currently Screened Movies");
        movieAdministrationPanel.add(lblActiveMoviesTabel, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btnAddMovie = new JButton();
        btnAddMovie.setText("Add Movie");
        movieAdministrationPanel.add(btnAddMovie, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 40), null, 0, false));
        btnBackToMain = new JButton();
        btnBackToMain.setText("Go Back");
        movieAdministrationPanel.add(btnBackToMain, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 40), null, 0, false));
        movieTablePanel = new JPanel();
        movieTablePanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        movieAdministrationPanel.add(movieTablePanel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        activeMoviesTable = new JTable();
        movieTablePanel.add(activeMoviesTable, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, 50), null, 0, false));
    }
}
